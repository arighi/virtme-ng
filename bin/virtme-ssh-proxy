#!/usr/bin/env python3
import argparse
import array
import socket
import sys
from collections.abc import Iterable

# Supported hostname and CID separators
#
# Important: Keep in sync with `VIRTME_SSH_HOSTNAME_CID_SEPARATORS`
SEPARATORS = ("%", "/")

# Some exit codes
SUCCESS = 0
ERROR_USAGE = 2


def get_hostname_cid(ssh_dst: str) -> tuple[str | None, int | None]:
    """Return the hostname and CID

    >>> hostname, cid = get_hostname_cid("virtme-ng/24")
    >>> hostname
    'virtme-ng'
    >>> cid
    24
    >>> hostname, cid = get_hostname_cid("virtme/ng/21")
    >>> hostname
    'virtme/ng'
    >>> cid
    21
    >>> hostname, cid = get_hostname_cid("v/ng,20")
    >>> hostname
    'v/ng'
    >>> cid
    20

    """
    for sep in SEPARATORS:
        if sep not in ssh_dst:
            continue

        splitted = ssh_dst.rsplit(sep, 1)
        try:
            hostname, cid = splitted[0], int(splitted[1], 10)
        except ValueError:
            print(f"No integer given for CID: {splitted[1]}", file=sys.stderr)
            return (None, None)
        return hostname, cid

    print(
        f"SSH destination name includes no CID: {ssh_dst}. For example 'virtme-ng/30'",
        file=sys.stderr,
    )
    return (None, None)


# See https://docs.python.org/3/library/socket.html#socket.socket.sendmsg
def send_fds(sock: socket.socket, fds: Iterable[int]) -> None:
    ancdata = [(socket.SOL_SOCKET, socket.SCM_RIGHTS, array.array("i", fds))]
    sock.sendmsg(
        [b"\0"],
        ancdata,
        socket.MSG_CMSG_CLOEXEC,
    )


def passfds(cid: int, port: int) -> None:
    sock = socket.socket(socket.AF_VSOCK, socket.SOCK_STREAM | socket.SOCK_CLOEXEC, 0)
    sock.connect((cid, port))
    return send_fds(socket.socket(fileno=1), [sock.fileno()])


def main() -> int:
    parser = argparse.ArgumentParser(
        prog="virtme-connect",
    )
    parser.add_argument("ssh_destination")
    parser.add_argument("-p", "--port", type=int, default=22)
    args = parser.parse_args()
    _hostname, cid = get_hostname_cid(args.ssh_destination)
    if cid is None:
        return ERROR_USAGE
    passfds(cid, args.port)
    return SUCCESS


if __name__ == "__main__":
    sys.exit(main())
